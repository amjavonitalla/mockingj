<div class="bs-docs-header">
	<div class="container">
		<h1>MockingJ</h1>

		<p>REST Mocking Server for Developers and Testers</p>
	</div>
	<a href="https://github.com/amjavonitalla/mockingj">
		<img style="position: absolute; top: 0; right: 0; border: 0;"
		     src="https://camo.githubusercontent.com/a6677b08c955af8400f44c6298f40e7d19cc5b2d/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f677261795f3664366436642e706e67"
		     alt="Fork me on GitHub"
		     data-canonical-src="https://s3.amazonaws.com/github/ribbons/forkme_right_gray_6d6d6d.png"></a>
</div>

<div class="container bs-docs-container">
	<div class="row">
		<div class="col-md-9" role="main">
			<div class="col-xs-12 col-lg-9">
				<h1 id="use-cases">Use Cases</h1>
				<ul class="getting-started">
					<li>
						<h3>Mobile and Client App Developers</h3>
						<p>The backend is not yet ready. Instead of hard-coding expected response in your code mock the response and point your app to
							MockingJ.</p>
					</li>
					<li>
						<h3>Testing Negative Scenarios</h3>
						<p>Making the server fail is hard but with MockingJ you can set the response code or even make the request timeout.</p>
					</li>
					<li>
						<h3>Automated Testing</h3>
						<p>Updating the response when testing different scenarios is tedious. MockingJ lets you group mock responses into a test case which you
							can
							access through a unique URL. Testing a new test case is as easy as switching a new URL.</p>
					</li>
				</ul>
			</div>
		</div>
		<div class="col-md-3" role="complementary">
			<nav class="bs-docs-sidebar">
				<ul class="nav bs-docs-sidenav">
					<li><a href="#use-cases">Use Cases</a></li>
					<li><a href="#gettting-started">Getting Started</a></li>
					<li><a href="#installing-mockingj">Installing MockingJ</a></li>
					<li><a href="#creating-mock-response">Creating your Mock Response</a></li>
					<li><a href="#test-case">Test Case</a></li>
				</ul>
			</nav>
		</div>
	</div>
</div>
